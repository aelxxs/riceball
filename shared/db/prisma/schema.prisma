generator client {
  provider = "prisma-client-js"
}

// the standard client generator
generator jsClient {
  provider = "prisma-client-js"
}

generator zod {
  provider                  = "zod-prisma-types"
  output                    = "../generated/zod"
  createRelationValuesTypes = true
  createInputTypes          = true
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum DiscordEntity {
  CHANNEL
  ROLE
  USER
}

type DiscordEmbed {
  title       String                @default("")
  description String                @default("")
  url         String                @default("")
  color       Int                   @default(0)
  timestamp   String                @default("")
  footer      DiscordEmbedFooter
  image       DiscordEmbedImage
  thumbnail   DiscordEmbedThumbnail
  author      DiscordEmbedAuthor
  fields      DiscordEmbedField[]
}

type DiscordEmbedAuthor {
  name     String @default("")
  url      String @default("")
  icon_url String @default("")
}

type DiscordEmbedField {
  name   String  @default("")
  value  String  @default("")
  inline Boolean @default(false)
}

type DiscordEmbedFooter {
  text     String @default("")
  icon_url String @default("")
}

type DiscordEmbedImage {
  url String @default("")
}

type DiscordEmbedThumbnail {
  url String @default("")
}

type Restriction {
  type RestrictionType
  omit String[]
}

model Message {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  guildId   String
  channelId String
  messageId String

  content String
  embeds  DiscordEmbed[]
}

enum RestrictionType {
  BLOCK_ALL
  ALLOW_ALL
}

model Guild {
  id       String  @id @map("_id")
  locale   String  @default("en-US")
  timezone String?

  embeds  DiscordEmbed[]
  levels  Levels
  stars   Stars
  economy Economy
}

model ReactionRole {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  guildId   String
  messageId String
  /// @zod.string.length(17, { message: "You must select a channel."})
  channelId String

  messageContent String        @default("")
  messageEmbed   DiscordEmbed?

  alias String

  type    ReactionRoleType   @default(NORMAL)
  enabled Boolean            @default(true)
  /// @zod.object.array(.min(1, { message: "You must provide at least one reaction role pair." }).max(20, { message: "A message can have a maximum of 20 reaction role pairs." }).nonempty())
  pairs   ReactionRolePair[]

  @@unique([guildId, messageId], name: "guildMessage")
}

type ReactionRolePair {
  emoji String
  /// @zod.string.array(.min(1, { message: "You must provide at least one role." }).max(20, { message: "A reaction can have a maximum of 20 roles." }).nonempty())
  roles String[]
}

enum ReactionRoleType {
  ADD // add role on reaction
  REMOVE // remove role on reaction
  UNIQUE // remove all other roles on reaction
  NORMAL // add role on reaction, remove on unreact
}

type Levels {
  enabled Boolean @default(true)

  // General Settings
  stackRewards   Boolean @default(false)
  clearOnLeave   Boolean @default(false)
  addRolesOnJoin Boolean @default(false)

  // default rank card
  rankCard            Card
  allowCustomRankCard Boolean @default(true)

  // server exp. boost
  boost  Int        @default(1)
  boosts ExpBoost[]

  // Text Based Exp. Gain
  textExpEnabled Boolean @default(true)
  textRateMin    Int     @default(1)
  textRateMax    Int     @default(25)
  textCooldown   Int     @default(25)

  // Voice Based Exp. Gain
  voiceExpEnabled Boolean @default(true)
  voiceRateMin    Int     @default(1)
  voiceRateMax    Int     @default(25)
  voiceCooldown   Int     @default(60)

  // Notifications
  notifyDestination    Destination  @default(ACTIVE_CHANNEL)
  notifyMessageType    MessageType  @default(EMBED)
  notifyChannel        String?
  notifyMessageContent String?
  notifyMessageEmbed   DiscordEmbed

  // Restrictions
  roleRestriction    Restriction
  channelRestriction Restriction

  // Rewards
  rewards Reward[]
}

type Reward {
  level Int
  roles String[]
}

enum Destination {
  ACTIVE_CHANNEL
  CUSTOM_CHANNEL
  PRIVATE_MESSAGE
  DISABLED
}

type ExpBoost {
  type  DiscordEntity
  id    String
  boost Int
}

type Stars {
  enabled   Boolean @default(true)
  channelId String?

  /// @zod.string.length(1, { message: "Emoji must be at one character long" })
  emoji             String  @default("‚≠ê")
  threshold         Int     @default(2) /// @zod.number.min(1, { message: "Reaction threshold must be at least 1" })
  duplicateOriginal Boolean @default(false)

  selfStarEnabled Boolean @default(true)
  selfStarWarning Boolean @default(false)

  messageType    MessageType   @default(EMBED)
  messageContent String?
  embed          DiscordEmbed? //

  // Restrictions
  roleRestriction    Restriction
  channelRestriction Restriction
}

enum MessageType {
  EMBED
  TEXT
}

model Star {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  refAuthorId  String
  refMessageId String
  refChannelId String

  messageId String?

  count Int      @default(1)
  users String[]

  @@unique([refMessageId], name: "refMessage")
}

type Economy {
  enabled Boolean @default(true)

  currencyName         String?
  currencyIcon         String               @default("üí¥")
  currencyIconLocation CurrencyIconLocation @default(LEFT)

  inventorySize Int @default(10)

  wagerMin Int @default(1)
  wagerMax Int @default(0)

  dailyRewardMin Int @default(5)
  dailyRewardMax Int @default(25)

  textRateMin  Int @default(5)
  textRateMax  Int @default(25)
  textCooldown Int @default(25)

  allowNegativeBalance Boolean @default(false)
  negativeBalanceLimit Int     @default(0)
  defaultBalance       Int     @default(0)

  debugMode    Boolean @default(false)
  clearOnLeave Boolean @default(false)
  autoUseItems Boolean @default(false)

  // Restrictions
  roleRestriction    Restriction?
  channelRestriction Restriction?
}

enum CurrencyIconLocation {
  LEFT
  RIGHT
}

model Item {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  guildId String

  active Boolean @default(true)

  type ItemType @default(STATIC)
  name String
  icon String?

  about String?
  price Int     @default(1)
  stock Int     @default(1)
  limit Int     @default(1)

  data ItemData?

  response PurchaseResponse?
  requires PurchaseRequires?

  autoUse Boolean @default(false)
  persist Boolean @default(false)
}

enum ItemType {
  ROLES
  BADGE
  STATIC
  CUSTOM
}

type ItemData {
  roles  String[]
  badge  String?
  script String?
}

type PurchaseResponse {
  channel String
  content String?
}

type PurchaseRequires {
  level Int?
  roles String[]
}

type InventoryItem {
  itemId String @db.ObjectId
  name   String
  amount Int
}

type Badge {
  itemId String  @db.ObjectId
  active Boolean
  slot   Int
}

type List {
  type DiscordEntity
  id   String
}

model User {
  id String @id @map("_id")

  birthday String?
  timezone String?
  bio      String?
  country  String?
  locale   String?

  reputation     Int @default(0)
  lastReputation Int @default(0)
}

model Member {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId  String
  guildId String

  bal Int @default(0)
  exp Int @default(0)

  card        Card
  cardPresets Card[]

  badges    Badge[]
  inventory InventoryItem[]

  lastDaily Int @default(0)

  @@unique([guildId, userId, badges.itemId], name: "guildMemberBadge")
  @@unique([guildId, userId, inventory.itemId], name: "guildMemberItem")
  @@unique([guildId, userId], name: "guildMember")
}

type Card {
  name String @default(uuid())

  borderRadius Int?

  wrapperImage       String?
  wrapperColor       HSLAColor?
  overlayColor       HSLAColor?
  overlayAccentColor HSLAColor?
  progressBarColor   HSLAColor?

  fontFamily FontFamily @default(MONOSPACE)

  textColor    HSLAColor?
  subtextColor HSLAColor?
}

enum FontFamily {
  SANS_SERIF
  SERIF
  MONOSPACE
  HANDWRITTEN
  CURSIVE
}

type HSLAColor {
  h Int
  s Int
  l Int
  a Float
}
