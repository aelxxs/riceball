generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum DiscordEntity {
  Channel
  Role
  User
}

type Restriction {
  type RestrictionType
  omit String[]
}

enum RestrictionType {
  BlockAll
  AllowAll
}

model Guild {
  id       String  @id @map("_id")
  locale   String  @default("en-US")
  timezone String?

  levels  Levels
  stars   Stars
  economy Economy
}

model ReactionRole {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  guildId   String
  messageId String
  channelId String

  alias String

  type    ReactionRoleType
  enabled Boolean            @default(true)
  pairs   ReactionRolePair[]

  @@unique([guildId, messageId], name: "guildMessage")
}

type ReactionRolePair {
  emoji String
  roles String[]
}

enum ReactionRoleType {
  Add
  Remove
  Unique
  Normal
}

type Levels {
  enabled Boolean @default(true)

  // General Settings
  stackRewards Boolean @default(false)
  clearOnLeave Boolean @default(false)

  boost  Int        @default(1)
  boosts ExpBoost[]

  // Text Based Exp. Gain
  textRateMin  Int @default(1)
  textRateMax  Int @default(25)
  textCooldown Int @default(25)

  // Voice Based Exp. Gain
  talkRateMin  Int @default(1)
  talkRateMax  Int @default(25)
  talkCooldown Int @default(60)

  // Notifications
  notifyChannel String?
  notifyMessage String?
  notifyEnabled Boolean @default(true)

  // Restrictions
  userRestriction    Restriction?
  roleRestriction    Restriction?
  channelRestriction Restriction?
}

type ExpBoost {
  type DiscordEntity
  id   String
}

model LevelingReward {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  guildId String
  level   Int
  roles   String[]

  @@unique([guildId, level], name: "guildLevel")
  @@unique([guildId, roles], name: "guildRoles")
}

type Stars {
  enabled   Boolean @default(true)
  channelId String?

  emoji     String @default("‚≠ê")
  threshold Int    @default(2)

  selfStarEnabled Boolean @default(true)
  selfStarWarning Boolean @default(false)

  // Restrictions
  userRestriction    Restriction?
  roleRestriction    Restriction?
  channelRestriction Restriction?
}

model Star {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  refAuthorId  String
  refMessageId String
  refChannelId String

  messageId String?

  count Int      @default(1)
  users String[]

  @@unique([refMessageId], name: "refMessage")
}

type Economy {
  enabled Boolean @default(true)

  currencyName String?
  currencyIcon String  @default("üí¥")

  inventorySize Int @default(10)

  wagerMin Int @default(1)
  wagerMax Int @default(0)

  dailyRewardMin Int @default(5)
  dailyRewardMax Int @default(25)

  textRateMin  Int @default(5)
  textRateMax  Int @default(25)
  textCooldown Int @default(25)

  allowNegativeBalance Boolean @default(false)
  negativeBalanceLimit Int     @default(0)
  defaultBalance       Int     @default(0)

  debugMode    Boolean @default(false)
  clearOnLeave Boolean @default(false)
  autoUseItems Boolean @default(false)

  // Restrictions
  userRestriction    Restriction?
  roleRestriction    Restriction?
  channelRestriction Restriction?
}

model Item {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  guildId String

  active Boolean @default(true)

  type ItemType @default(Static)
  name String
  icon String?

  price Int     @default(1)
  stock Int     @default(1)
  about String?
  limit Int     @default(1)

  data ItemData?

  response PurchaseResponse?
  requires PurchaseRequires?

  autoUse Boolean @default(false)
  persist Boolean @default(false)
}

enum ItemType {
  Roles
  Badge
  Static
  Custom
}

type ItemData {
  roles  String[]
  badge  String?
  script String?
}

type PurchaseResponse {
  channel String
  content String?
}

type PurchaseRequires {
  level Int?
  roles String[]
}

type InventoryItem {
  itemId String @db.ObjectId
  name   String
  amount Int
}

type Badge {
  itemId String  @db.ObjectId
  active Boolean
  slot   Int
}

type List {
  type DiscordEntity
  id   String
}

model User {
  id String @id @map("_id")

  birthday String?
  timezone String?
  bio      String?
  country  String?
  locale   String?

  reputation     Int @default(0)
  lastReputation Int @default(0)
}

model Member {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId  String
  guildId String

  bal Int @default(0)
  exp Int @default(0)

  card Card

  badges    Badge[]
  inventory InventoryItem[]

  lastDaily Int @default(0)

  @@unique([guildId, userId, badges.itemId], name: "guildMemberBadge")
  @@unique([guildId, userId, inventory.itemId], name: "guildMemberItem")
  @@unique([guildId, userId], name: "guildMember")
}

type Card {
  name String @default(uuid())

  showBio      Boolean @default(true)
  showStatsBox Boolean @default(true)
  showStatsBar Boolean @default(true)
  showBadges   Boolean @default(true)
  showIcon     Boolean @default(true)
  showFlag     Boolean @default(true)

  backgroundUrl     String?
  backgroundBlur    Int     @default(0)
  backgroundColor   String?
  backgroundOpacity Int     @default(100)

  fontColor  String?
  fontFamily String?

  primaryColor  String?
  accentColor   String?
  progressColor String?

  primaryOpacity  Int @default(100)
  accentOpacity   Int @default(100)
  progressOpacity Int @default(100)

  borderRadius Int @default(15)
}
